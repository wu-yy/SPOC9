Page数据结构是如何跟实际物理页联系起来的呢？
struct Page {
    int ref;                        // page frame's reference counter
    uint32_t flags;                 // array of flags that describe the status of the page frame
    unsigned int property;          // the num of free block, used in first fit pm manager
    list_entry_t page_link;         // free list link
};
简单来说，就是用一个Page对象中page_link的地址，减去page_link在Page结构中的偏移量，找到相应的Page对象的地址，然后强转成Page对象。
st_entry_t通用双向循环链表中仅保存了某特定数据结构中链表节点成员变量的地址，那么如何通过这个链表节点成员变量访问到它的所有者（即某特定数据结构的变量）呢？Linux为此提供了针对数据结构XXX的le2XXX(le, member)的宏，其中le，即list entry的简称，是指向数据结构XXX中list_entry_t成员变量的指针，也就是存储在双向循环链表中的节点地址值， member则是XXX数据类型中包含的链表节点的成员变量。例如，我们要遍历访问空闲块链表中所有节点所在的基于Page数据结构的变量，则可以采用如下编程方式（基于lab2/kern/mm/default_pmm.c）：
//free_area是空闲块管理结构，free_area.free_list是空闲块链表头
 free_area_t free_area;
 list_entry_t * le = &free_area.free_list; //le是空闲块链表头指针
 while((le=list_next(le)) != &free_area.free_list) { //从第一个节点开始遍历
 struct Page *p = le2page(le, page_link); //获取节点所在基于Page数据结构的变量
 ……
 }
 
 
 
 ucore中采用的方法是将struct Page按照他们所管辖的物理页面的地址大小进行连续储存, 所以可以使用page2pa宏通过对page结构提首地址进行移位操作获得对应地址, 详情可见mm/pmm.h, 其中pages可以认为是存储所有struct Page的首地址.
static inline ppn_t
page2ppn(struct Page *page) {
    return page - pages;
}

static inline uintptr_t
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}


memlayout.h 定义的 KERNEL BASE 是 #define KERNBASE            0xC0000000 。
 ucore kernel的虚拟内核空间的起始地址为0xC0000000, 
而 tools/kernel.ld （ld链接工具的配置文件），指出了
----
SECTIONS {
/* Load the kernel at this address: "." means the current address */
. = 0xC0100000;    <----说明了编译出的kernel执行文件的虚拟内核的起始地址为0xC0100000，这个地址就是 kern_entry 函数（位于kern/init/entry.S）的起始地址。
